<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:sec="http://www.springframework.org/schema/security"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd
       	http://www.springframework.org/schema/security
      	http://www.springframework.org/schema/security/spring-security.xsd
      	http://www.springframework.org/schema/context 
      	http://www.springframework.org/schema/context/spring-context.xsd">

	<context:annotation-config/>
	
	<context:component-scan base-package="org.springframework.security.saml"/>

	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
	    <property name="locations">
	        <array>
	            <value>classpath:/config.properties</value>
	        </array>
	    </property> 
	</bean>

	<!-- SAML2 -->
    <sec:http pattern="/download/**" entry-point-ref="samlEntryPoint">
    	<sec:headers>
    		<sec:frame-options disabled="true"/>
    	</sec:headers>      
        <sec:custom-filter after="BASIC_AUTH_FILTER" ref="samlFilter"/>
        <sec:custom-filter before="CSRF_FILTER" ref="samlFilter"/> 
    </sec:http>
    
    <sec:http pattern="/upload/**" entry-point-ref="samlEntryPoint">
    	<sec:headers>
    		<sec:frame-options disabled="true"/>
    	</sec:headers>
    	<sec:csrf disabled="true"/>          
        <sec:custom-filter after="BASIC_AUTH_FILTER" ref="samlFilter"/>
        <sec:custom-filter before="CSRF_FILTER" ref="samlFilter"/> 
    </sec:http>
	
    <!-- Secured pages with SAML as entry point -->
    <sec:http entry-point-ref="samlEntryPoint">
        <sec:headers>
    		<sec:frame-options disabled="true"/>
    	</sec:headers>
        <sec:csrf disabled="true"/>
        <sec:intercept-url pattern="/saml/**" access="fullyAuthenticated"/>
        <sec:custom-filter after="BASIC_AUTH_FILTER" ref="samlFilter"/>
    </sec:http>

    <!-- Filters for processing of SAML messages -->
    <bean id="samlFilter" class="org.springframework.security.web.FilterChainProxy">
        <sec:filter-chain-map request-matcher="ant">
            <sec:filter-chain pattern="/saml/login/**" filters="samlEntryPoint"/>
            <sec:filter-chain pattern="/saml/SSO/**" filters="samlWebSSOProcessingFilter"/>
            <sec:filter-chain pattern="/saml/logout/**" filters="samlLogoutFilter"/>
            <sec:filter-chain pattern="/saml/SingleLogout/**" filters="samlLogoutProcessingFilter"/>
            
            <!-- 
            <sec:filter-chain pattern="/saml/metadata/**" filters="metadataDisplayFilter"/>
            <sec:filter-chain pattern="/saml/SSOHoK/**" filters="samlWebSSOHoKProcessingFilter"/>
            <sec:filter-chain pattern="/saml/discovery/**" filters="samlIDPDiscovery"/>
            -->
        </sec:filter-chain-map>
    </bean>
	
	<!-- Handler deciding where to redirect user after successful login -->
    <!-- 
    <bean id="successRedirectHandler"
          class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
        <property name="defaultTargetUrl" value="${webapp.location}/services/message.wsdl"/>
    </bean>
    --> 
 
    <!-- Use the following for interpreting RelayState coming from unsolicited response as redirect URL: -->
    <bean id="successRedirectHandler" class="org.springframework.security.saml.SAMLRelayStateSuccessHandler">
        <property name="defaultTargetUrl" value="${webapp.wrksp.location}" />
    </bean>
   
	
    <!-- Handler deciding where to redirect user after failed login -->
    <bean id="failureRedirectHandler"
          class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
        <property name="useForward" value="true"/>
        <property name="defaultFailureUrl" value="/ui/error.jsp"/>
    </bean>

    <!-- Handler deciding where to redirect user after successful logout -->
    <bean id="successLogoutHandler" class="org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler">
        <property name="defaultTargetUrl" value="${webapp.location}/saml/login"/>
    </bean>

    <sec:authentication-manager alias="authenticationManager">
        <!-- Register authentication manager for SAML provider -->
        <sec:authentication-provider ref="samlAuthenticationProvider"/>
        <!-- Register authentication manager for administration UI -->
        <sec:authentication-provider>
            <sec:user-service id="adminInterfaceService">
                <sec:user name="admin" password="admin" authorities="ROLE_ADMIN"/>
            </sec:user-service>
        </sec:authentication-provider>
    </sec:authentication-manager>

    <!-- Logger for SAML messages and events -->
    <bean id="samlLogger" class="org.springframework.security.saml.log.SAMLDefaultLogger"/>

    <!-- Central storage of cryptographic keys -->
    <bean id="keyManager" class="org.springframework.security.saml.key.JKSKeyManager">
        <constructor-arg value="${saml.keystore}"/>
        <constructor-arg type="java.lang.String" value="${saml.keystore.password}"/>
        <constructor-arg>
            <map>
                <entry key="${saml.sign.key.alias}" value="${saml.sign.key.password}"/>
            </map>
        </constructor-arg>
        <constructor-arg type="java.lang.String" value="${saml.sign.key.alias}"/>
    </bean>
	
    <!-- Entry point to initialize authentication, default values taken from properties file -->
    <bean id="samlEntryPoint" class="org.springframework.security.saml.SAMLEntryPoint">
        <property name="defaultProfileOptions">
            <bean class="org.springframework.security.saml.websso.WebSSOProfileOptions">
                <property name="includeScoping" value="false"/>
                <property name="relayState" value="${webapp.wrksp.location}"/>
            </bean>
        </property>
    </bean>
	
    <!-- Filter automatically generates default SP metadata -->
	<bean id="metadataGeneratorFilter" class="org.springframework.security.saml.metadata.MetadataGeneratorFilter">
		<constructor-arg>
			<bean class="org.springframework.security.saml.metadata.MetadataGenerator">
				<property name="entityId" value="urn:test:saml20:ssomanager"/>
				<property name="extendedMetadata">
					<bean class="org.springframework.security.saml.metadata.ExtendedMetadata">
						<property name="idpDiscoveryEnabled" value="false"/>
					</bean>
				</property>
			</bean>
		</constructor-arg>
	</bean>

    <!-- The filter is waiting for connections on URL suffixed with filterSuffix and presents SP metadata there -->
    <bean id="metadataDisplayFilter" class="org.springframework.security.saml.metadata.MetadataDisplayFilter"/>

    <!-- IDP Metadata configuration - paths to metadata of IDPs in circle of trust is here -->
	<bean id="metadata" class="org.springframework.security.saml.metadata.CachingMetadataManager">
		<constructor-arg>
			<list>
				<bean class="org.springframework.security.saml.metadata.ExtendedMetadataDelegate">
				    <constructor-arg>
				        <bean class="org.opensaml.saml2.metadata.provider.ResourceBackedMetadataProvider">
				            <constructor-arg>
				                <bean class="java.util.Timer"/>
				            </constructor-arg>
				            <constructor-arg>
				                <bean class="org.opensaml.util.resource.ClasspathResource">
				                    <constructor-arg value="/${saml.sp.metadata.filename}"/>
				                </bean>
				            </constructor-arg>
				            <property name="parserPool" ref="parserPool"/>
				        </bean>
				    </constructor-arg>
				    <constructor-arg>
				        <bean class="org.springframework.security.saml.metadata.ExtendedMetadata">
				           <property name="local" value="true"/>
				           <property name="securityProfile" value="metaiop"/>
				           <property name="sslSecurityProfile" value="pkix"/>
				           <property name="sslHostnameVerification" value="default"/>
				           <property name="signMetadata" value="false"/>
				           <property name="signingKey" value="${saml.sign.key.alias}"/>
				           <property name="encryptionKey" value="${saml.sign.key.alias}"/>
				           <property name="requireArtifactResolveSigned" value="false"/>
				           <property name="requireLogoutRequestSigned" value="false"/>
				           <property name="requireLogoutResponseSigned" value="false"/>
				           <property name="idpDiscoveryEnabled" value="false"/>
				        </bean>
				    </constructor-arg>
				</bean>                
                <bean class="org.springframework.security.saml.metadata.ExtendedMetadataDelegate">
                    <constructor-arg>
                        <bean class="org.opensaml.saml2.metadata.provider.ResourceBackedMetadataProvider">
                            <constructor-arg>
                                <bean class="java.util.Timer"/>
                            </constructor-arg>
                            <constructor-arg>
                                <bean class="org.opensaml.util.resource.ClasspathResource">
                                    <constructor-arg value="/${saml.idp.metadata.filename}"/>
                                </bean>
                            </constructor-arg>
                            <property name="parserPool" ref="parserPool"/>
                        </bean>
                    </constructor-arg>
                    <constructor-arg>
                        <bean class="org.springframework.security.saml.metadata.ExtendedMetadata">
                        </bean>
                    </constructor-arg>
                </bean>
 			</list>
		</constructor-arg>
	</bean>
	
    <!-- SAML Authentication Provider responsible for validating of received SAML messages -->
    <bean id="samlAuthenticationProvider" class="org.springframework.security.saml.SAMLAuthenticationProvider">
        <!-- OPTIONAL property: can be used to store/load user data after login -->
        <!--
        <property name="userDetails" ref="bean" />
        -->
    </bean>

	<bean id="contextProvider" class="org.springframework.security.saml.context.SAMLContextProviderImpl">
        <property name="storageFactory">
            <bean class="org.springframework.security.saml.storage.EmptyStorageFactory"/>
        </property>
    </bean>    

    <!-- Processing filter for WebSSO profile messages -->
    <bean id="samlWebSSOProcessingFilter" class="org.springframework.security.saml.SAMLProcessingFilter">
        <property name="authenticationManager" ref="authenticationManager"/>
         <property name="authenticationSuccessHandler" ref="successRedirectHandler"/>
         <property name="authenticationFailureHandler" ref="failureRedirectHandler"/>
    </bean>

    <!-- Logout handler terminating local session -->
    <bean id="logoutHandler"
          class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler">
        <property name="invalidateHttpSession" value="true"/>
    </bean>

    <!-- Override default logout processing filter with the one processing SAML messages -->
    <bean id="samlLogoutFilter" class="org.springframework.security.saml.SAMLLogoutFilter">
        <constructor-arg index="0" ref="successLogoutHandler"/>
        <constructor-arg index="1" ref="logoutHandler"/>
        <constructor-arg index="2" ref="logoutHandler"/>
    </bean>

    <!-- Filter processing incoming logout messages -->
    <!-- First argument determines URL user will be redirected to after successful global logout -->
    <bean id="samlLogoutProcessingFilter" class="org.springframework.security.saml.SAMLLogoutProcessingFilter">
        <constructor-arg index="0" ref="successLogoutHandler"/>
        <constructor-arg index="1" ref="logoutHandler"/>
    </bean>
    

    <!-- Class loading incoming SAML messages from httpRequest stream -->
    <bean id="processor" class="org.springframework.security.saml.processor.SAMLProcessorImpl">
        <constructor-arg>
            <list>
                <ref bean="redirectBinding"/>
                <ref bean="postBinding"/>
                <ref bean="artifactBinding"/>
                <ref bean="soapBinding"/>
                <ref bean="paosBinding"/>
            </list>
        </constructor-arg>
    </bean>
	
    <!-- SAML 2.0 WebSSO Assertion Consumer -->
    <bean id="webSSOprofileConsumer" class="org.springframework.security.saml.websso.WebSSOProfileConsumerImpl" lazy-init="true">
    <property name="maxAuthenticationAge" value="${saml.idp.max.auth.age}"/>
    </bean>

    <!-- SAML 2.0 Holder-of-Key WebSSO Assertion Consumer -->
    <bean id="hokWebSSOprofileConsumer" class="org.springframework.security.saml.websso.WebSSOProfileConsumerHoKImpl"/>

    <!-- SAML 2.0 Web SSO profile -->
    <bean id="webSSOprofile" class="org.springframework.security.saml.websso.WebSSOProfileImpl"/>

    <!-- SAML 2.0 Holder-of-Key Web SSO profile -->
    <bean id="hokWebSSOProfile" class="org.springframework.security.saml.websso.WebSSOProfileConsumerHoKImpl"/>

    <!-- SAML 2.0 ECP profile -->
    <bean id="ecpprofile" class="org.springframework.security.saml.websso.WebSSOProfileECPImpl"/>

    <!-- SAML 2.0 Logout Profile -->
    <bean id="logoutprofile" class="org.springframework.security.saml.websso.SingleLogoutProfileImpl"/>

    <!-- Bindings, encoders and decoders used for creating and parsing messages -->
    <bean id="postBinding" class="org.springframework.security.saml.processor.HTTPPostBinding">
        <constructor-arg ref="parserPool"/>
        <constructor-arg ref="velocityEngine"/>
    </bean>

    <bean id="redirectBinding" class="org.springframework.security.saml.processor.HTTPRedirectDeflateBinding">
        <constructor-arg ref="parserPool"/>
    </bean>

    <bean id="artifactBinding" class="org.springframework.security.saml.processor.HTTPArtifactBinding">
        <constructor-arg ref="parserPool"/>
        <constructor-arg ref="velocityEngine"/>
        <constructor-arg>
            <bean class="org.springframework.security.saml.websso.ArtifactResolutionProfileImpl">
                <constructor-arg>
                    <bean class="org.apache.commons.httpclient.HttpClient">
                        <constructor-arg>
                            <bean class="org.apache.commons.httpclient.MultiThreadedHttpConnectionManager"/>
                        </constructor-arg>
                    </bean>
                </constructor-arg>
                <property name="processor">
                    <bean class="org.springframework.security.saml.processor.SAMLProcessorImpl">
                        <constructor-arg ref="soapBinding"/>
                    </bean>
                </property>
            </bean>
        </constructor-arg>
    </bean>

    <bean id="soapBinding" class="org.springframework.security.saml.processor.HTTPSOAP11Binding">
        <constructor-arg ref="parserPool"/>
    </bean>

    <bean id="paosBinding" class="org.springframework.security.saml.processor.HTTPPAOS11Binding">
        <constructor-arg ref="parserPool"/>
    </bean>

    <!-- Initialization of OpenSAML library-->
    <bean class="org.springframework.security.saml.SAMLBootstrap"/>

    <!-- Initialization of the velocity engine -->
    <bean id="velocityEngine" class="org.springframework.security.saml.util.VelocityFactory" factory-method="getEngine"/>

    <!-- XML parser pool needed for OpenSAML parsing -->
    <bean id="parserPool" class="org.opensaml.xml.parse.StaticBasicParserPool" init-method="initialize">
        <property name="builderFeatures">
            <map>
                <entry key="http://apache.org/xml/features/dom/defer-node-expansion" value="false"/>
            </map>
        </property>
    </bean>

    <bean id="parserPoolHolder" class="org.springframework.security.saml.parser.ParserPoolHolder"/>
</beans>
