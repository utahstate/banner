<?xml version="1.0" encoding="UTF-8"?>
<!--
/******************************************************************************
 Copyright 2019-2022 Ellucian Company L.P. and its affiliates.
******************************************************************************/
/**
*    This is the default logging configuration for the CommunicationManagement application.
*
*    Each Banner application will have its own logging file.  Example: CommunicationManagement.log
*    Banner logging files are set up to roll on a daily basis with SizeAndTimeBasedRolling Policy. Example: CommunicationManagement-2019-03-05-0.log
*
*        Default settings for Banner logging:
*           Root logger level: ERROR
*           Logging is turned DEBUG for specific packages (see below) with commented. This should be uncomment based on requirement.
*
*        User can specify the different logging directory using the following system property:
*            -Dbanner.logging.dir=<full directory path>  (THIS MUST BE AN ABSOLUTE PATH WITH WRITE PERMISSION)
*            Example: -Dbanner.logging.dir=/home/tomcat/logs
*
*        If different logging directory is not configured then the log files will be generated in the build folder as Provided default by Grails.
*
*        Use JMX to change logger levels for ROOT or specific packages/artifacts.
*
*        Optionally, you can modify this file to change the logger level for ROOT or specific packages/artifacts.
*
*        Valid logger levels in order: ALL < TRACE < DEBUG < INFO < WARN < ERROR < OFF
*/
-->
<configuration>

    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter"/>
    <conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"/>

    <!--******* Configure JMX access *******-->
    <!--
    The names used to register Mbeans must be unique for all applications deployed into the JVM.
    This configuration should be updated for each instance of each application to ensure uniqueness.
    -->
    <jmxConfigurator/>

    <property name="encoderPattern" value="[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%t] %-5p %c %X - %m%n"/>
    <property name="timeStampPatternAsPerLoggingMaturation" value="yyyy-MMM-dd @ hh:mm:ss.sssZ" />

    <!--
    This context property used to define the log format.
    There are three types of log formats
        1) log - Log file format will be 'log', this format will be used in production servers.
        2) json - Log file format will be in JSON, this format will be used in SAAS production servers.
        3) console - Only console logs used for development, this is default format.

    fileLoggingFormat values are case-sensitive.
    -->
    <property scope="context" name="fileLoggingFormat" value="log"/>

    <if condition='property("fileLoggingFormat").equals("log")'>
        <then>
            <appender name="APP_LOG" class="net.hedtech.banner.logging.BannerRollingFileAppender">
                <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
                    <Pattern>${encoderPattern}</Pattern>
                </encoder>

                <rollingPolicy class="net.hedtech.banner.logging.BannerSizeAndTimeBasedRollingPolicy">
                    <maxFileSize>10MB</maxFileSize>  <!--Max size allowed for each log files-->
                    <maxHistory>10</maxHistory>  <!--Deletes older log files older than 30 days.-->
                    <totalSizeCap>3GB</totalSizeCap> <!--Total Max size allowed for the log files on disk-->
                </rollingPolicy>
            </appender>
        </then>
    </if>
    <if condition='property("fileLoggingFormat").equals("json")'>
        <then>
            <appender name="APP_LOG" class="net.hedtech.banner.logging.BannerRollingFileAppenderJSON">
                <append>true</append>
                <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
                    <providers class="net.logstash.logback.composite.loggingevent.LoggingEventJsonProviders">
                        <timestamp class="net.logstash.logback.composite.loggingevent.LoggingEventFormattedTimestampJsonProvider">
                            <fieldName>timestamp</fieldName>
                            <timeZone>UTC</timeZone>
                            <pattern>${timeStampPatternAsPerLoggingMaturation}</pattern>
                        </timestamp>
                        <logLevel class="net.logstash.logback.composite.loggingevent.LogLevelJsonProvider"></logLevel>
                        <loggerName class="net.logstash.logback.composite.loggingevent.LoggerNameJsonProvider">
                            <fieldName>componentName</fieldName>
                            <shortenedLoggerNameLength>35</shortenedLoggerNameLength>
                        </loggerName>
                        <message class="net.logstash.logback.composite.loggingevent.MessageJsonProvider">
                            <fieldName>message</fieldName>
                        </message>
                        <uuid class="net.logstash.logback.composite.loggingevent.UuidProvider">
                            <fieldName>messageId</fieldName>
                        </uuid>
                        <mdc class="net.logstash.logback.composite.loggingevent.MdcJsonProvider"></mdc>
                    </providers>
                </encoder>

                <fixedWindowRollingPolicyMaxIndex>30</fixedWindowRollingPolicyMaxIndex>
                <triggeringPolicyFileSize>10MB</triggeringPolicyFileSize>
            </appender>
        </then>
    </if>
    <if condition='property("fileLoggingFormat").equals("console")'>
        <then>
            <!--Define console appender-->
            <appender name="APP_LOG" class="ch.qos.logback.core.ConsoleAppender">
                <encoder>
                    <charset>UTF-8</charset>
                    <pattern>${encoderPattern}</pattern>
                </encoder>
            </appender>
             <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
            <encoder>
                <charset>UTF-8</charset>
                <pattern>${encoderPattern}</pattern>
            </encoder>
             </appender>
        </then>
    </if>

    <root level="error">
        <appender-ref ref="APP_LOG"/>
        <appender-ref ref="STDOUT" />
    </root>

    <!--******** Grails framework classes *********-->
    <!--<logger name="grails.app.controllers" level="DEBUG"/>--> <!--controllers-->
    <!--<logger name="grails.app.services" level="DEBUG"/>--> <!--services-->
    <!--<logger name="org.grails.web.mapping" level="DEBUG"/>--> <!--URL mapping-->
    <!--<logger name="grails.plugins.DefaultGrailsPluginManager" level="DEBUG"/>--> <!--grails plugins-->


    <!--******* Banner Security framework classes **********-->
    <!--<logger name="net.hedtech.banner" level='DEBUG'/>-->
    <!--<logger name="net.hedtech.banner" level='DEBUG'/>-->
    <!--<logger name="net.hedtech.banner.db" level="DEBUG"/>-->
    <!--<logger name="net.hedtech.banner.security.BannerAccessDecisionVoter" level="DEBUG"/>-->
    <!--<logger name="net.hedtech.banner.security.BannerAuthenticationProvider" level="DEBUG"/>-->
    <!--<logger name="net.hedtech.banner.security.SelfServiceBannerAuthenticationProvider" level="DEBUG"/>-->
    <!--<logger name="net.hedtech.banner.security.BannerUser" level="DEBUG"/>-->


    <!--******* Grails and Spring Security framework classes **********-->
    <!--<logger name="grails.plugin.springsecurity" level="DEBUG"/>-->
    <!--<logger name="grails.plugin.springsecurity.web.GrailsSecurityFilterChain" level="DEBUG"/>-->
    <!--<logger name="org.springframework.security" level="DEBUG"/>-->


    <!--******** CAS & SAML classes **********-->
    <!--<logger name="org.jasig.cas.client.session.SingleSignOutFilter" level="DEBUG"/>-->
    <!--<logger name="org.jasig.cas.client.session.SingleSignOutHandler" level="DEBUG"/>-->
    <!--<logger name="org.jasig.cas" level="DEBUG"/>-->
    <!--<logger name="grails.plugin.springsecurity" level="DEBUG"/>-->
    <!--<logger name="net.hedtech.banner.security.BannerSamlSessionFilter" level="DEBUG"/>-->
    <!--<logger name="net.hedtech.banner.security.CasAuthenticationProvider" level="DEBUG"/>-->
    <!--<logger name="net.hedtech.banner.security.BannerSamlAuthenticationProvider" level="DEBUG"/>-->
    <!--<logger name="net.hedtech.jasig.cas.client" level="DEBUG"/>-->
    <!--<logger name="org.springframework.security.cas.web.CasAuthenticationFilter" level="DEBUG"/>-->
    <!--<logger name="org.springframework.security.web.FilterChainProxy" level="DEBUG"/>-->
    <!--<logger name="grails.plugin.springsecurity" level="DEBUG"/>-->
    <!--<logger name="grails.plugin.springsecurity.web.filter.DebugFilter" level="DEBUG"/>-->
    <!--<logger name="org.grails.plugin.springsecurity.saml" level="DEBUG"/>-->
    <!--<logger name="org.springframework.security" level="DEBUG"/>-->


    <!--******* hibernate ORM **********-->
    <!--<logger name="org.hibernate.type" level="DEBUG"/>-->
    <!--<logger name="org.hibernate.SQL" level="DEBUG"/>-->


    <!--******* Application packages *******-->
    <!--<logger name="net.hedtech.banner.ui.ss" level="DEBUG"/>-->
    <!--<logger name="sandbox_test" level="ALL"/>-->

</configuration>
